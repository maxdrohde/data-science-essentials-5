mutate(bias_ratio = (bias/rho))-> st
st %>%
ggplot(aes(x=n, y=bias)) +
#geom_point()+
geom_line()+
facet_wrap(~rho)+
labs(title="Correlation Plug-In Estimator",
subtitle="Bias as a function of rho and sample size",
caption="Number of simulations per point = 10^4",
x="Sample Size", y="Bias")+
theme_linedraw()+
theme(text=element_text(size=10, family="Helvetica"))
ggsave(filename = "rho_bias.pdf", width=11, height=8.5, units="in", useDingbats=FALSE)
library(tidyverse)
x <- seq(-2, 2, length.out=1e4)
x <- seq(-2, 2, length.out=1e4)
y <- 3*x^2 + 3
plot(x,y, type = "l")
library(tidyverse)
x <- seq(-2, 2, length.out=1e4)
y <- 3*x^2 +2*x + 3.2
plot(x,y, type = "l")
y
plot(x,y, type = "l")
?approx
library(tidyverse)
x <- seq(-2, 2, length.out=10)
y <- 3*x^2 +2*x + 3.2
plot(x,y, type = "l")
library(tidyverse)
x <- seq(-2, 2, length.out=15)
y <- 3*x^2 +2*x + 3.2
plot(x,y, type = "l")
(x,y, method="constant")
approx(x,y, method="constant")
app <- approx(x,y, method="constant", n = 20)
library(tidyverse)
x <- seq(-2, 2, length.out=15)
y <- 3*x^2 +2*x + 3.2
app <- approx(x,y, method="constant", n = 20)
plot(app$x,app$y, type = "l")
library(tidyverse)
x <- seq(-2, 2, length.out=15)
y <- 3*x^2 +2*x + 3.2
app <- approx(x,y, method="constant", n = 50)
plot(app$x,app$y, type = "l")
library(tidyverse)
x <- seq(-2, 2, length.out=15)
y <- 3*x^2 +2*x + 3.2
app <- approx(x,y, method="constant", n = 100)
plot(app$x,app$y, type = "l")
library(tidyverse)
x <- seq(-2, 2, length.out=15)
y <- 3*x^2 +2*x + 3.2
app <- approx(x,y, method="constant", n = 200)
plot(app$x,app$y, type = "l")
library(tidyverse)
x <- seq(-2, 2, length.out=15)
y <- 3*x^2 +2*x + 3.2
app <- approx(x,y, method="constant", n = 1e6)
plot(app$x,app$y, type = "l")
x
app$x
library(tidyverse)
x <- seq(-2, 2, length.out=15)
y <- 3*x^2 +2*x + 3.2
app <- approx(x,y, method="constant", n = 1e5)
plot(app$x,app$y, type = "l")
library(tidyverse)
x <- seq(-2, 2, length.out=20)
y <- 3*x^2 +2*x + 3.2
app <- approx(x,y, method="constant", n = 1e5)
plot(app$x,app$y, type = "l")
library(tidyverse)
x <- seq(-2, 2, length.out=20)
y <- 3*x^2 +2*x + 3.2
app <- approx(x,y, method="constant", n = 1e5)
plot(x, y, type="l", col="red")
plot(app$x, app$y, type = "l")
library(tidyverse)
x <- seq(-2, 2, length.out=20)
y <- 3*x^2 +2*x + 3.2
app <- approx(x,y, method="constant", n = 1e5)
plot(x, y, type="l", col="red")
plot(app$x, app$y, type = "l")
plot(x, y, type="l", col="red")
plot(app$x, app$y, type = "l")
library(tidyverse)
x <- seq(-2, 2, length.out=20)
y <- 3*x^2 +2*x + 3.2
app <- approx(x,y, method="constant", n = 1e5)
plot(x, y, type="l", col="red")
lines(app$x, app$y)
library(tidyverse)
x <- seq(-2, 2, length.out=30)
y <- 3*x^2 +2*x + 3.2
app <- approx(x,y, method="constant", n = 1e5)
plot(x, y, type="l", col="red")
lines(app$x, app$y)
library(tidyverse)
x <- seq(-2, 2, length.out=30)
y <- 3*x^2 +2*x + 3.2
app <- approx(x,y, method="constant", n = 1e5)
plot(x, y, type="l", col="red", alpha=0.4)
lines(app$x, app$y)
library(tidyverse)
x <- seq(-2, 2, length.out=30)
y <- 3*x^2 +2*x + 3.2
app <- approx(x,y, method="constant", n = 1e5)
plot(x, y, type="l", col="red", alpha=0.4)
lines(app$x, app$y)
library(tidyverse)
x <- seq(-2, 2, length.out=30)
y <- 3*x^2 +2*x + 3.2
app <- approx(x,y, method="constant", n = 1e5)
plot(x, y, type="l", col="red")
lines(app$x, app$y)
optim(y)
?optim
optim(fn = function(x) y)
optim(par=-1, fn = function(x) y)
optim(par=-1, fn = function(x) y, method="Brent")
optim(fn = function(x) y, method="Brent", lower=-2, upper=2)
optim(par=-1, fn = function(x) y, method="Brent", lower=-2, upper=2)
?optimize
optimize(f = function(x) y,
lower=-2,
upper=2)
loss_function <- function(x) y
lines(app$x, app$y)
?case_when
piecewise <- function(x) {
case_when(
between(x, -2, -1) ~ 5,
between(x, -1, 0) ~ 2,
between(x,  0, 1) ~ 4,
between(x, 1, 2) ~ 3
)
}
library(tidyverse)
piecewise <- function(x) {
case_when(
between(x, -2, -1) ~ 5,
between(x, -1, 0) ~ 2,
between(x,  0, 1) ~ 4,
between(x, 1, 2) ~ 3
)
}
x <- seq(-2, 2, length.out=30)
y <- piecewise(x)
plot(x,y)
plot(x,y)
lines(x,y)
library(tidyverse)
piecewise <- function(x) {
case_when(
between(x, -2, -1) ~ 5,
between(x, -1, 0) ~ 2,
between(x,  0, 1) ~ 4,
between(x, 1, 2) ~ 3
)
}
x <- seq(-2, 2, length.out=50)
y <- piecewise(x)
plot(x,y)
lines(x,y)
optimize(f = piecewise
lower=-2,
upper=2)
optimize(f = piecewise,
lower=-2,
upper=2)
library(tidyverse)
piecewise <- function(x) {
case_when(
between(x, -2, -1) ~ 5,
between(x, -1, 0) ~ 2,
between(x, -1, 0.5) ~ -1,
between(x,  0, 1) ~ 4,
between(x, 1, 2) ~ 3
)
}
x <- seq(-2, 2, length.out=50)
y <- piecewise(x)
library(tidyverse)
piecewise <- function(x) {
case_when(
between(x, -2, -1) ~ 5,
between(x, -1, 0) ~ 2,
between(x, 0, 0.5) ~ -1,
between(x,  0.5, 1) ~ 4,
between(x, 1, 2) ~ 3
)
}
x <- seq(-2, 2, length.out=50)
y <- piecewise(x)
library(tidyverse)
piecewise <- function(x) {
case_when(
between(x, -2, -1) ~ 5,
between(x, -1, 0) ~ 2,
between(x, 0, 0.5) ~ -1,
between(x,  0.5, 1) ~ 4,
between(x, 1, 2) ~ 3
)
}
x <- seq(-2, 2, length.out=50)
y <- piecewise(x)
library(tidyverse)
piecewise <- function(x) {
case_when(
between(x, -2, -1) ~ 5,
between(x, -1, 0) ~ 2,
between(x, 0, 0.5) ~ 16,
between(x,  0.5, 1) ~ 4,
between(x, 1, 2) ~ 3
)
}
x <- seq(-2, 2, length.out=50)
y <- piecewise(x)
library(tidyverse)
piecewise <- function(x) {
case_when(
between(x, -2, -1) ~ 5,
between(x, -1, 0) ~ 2,
between(x, 0, 0.5) ~ 16,
between(x,0.5, 1) ~ 4,
between(x, 1, 2) ~ 3
)
}
x <- seq(-2, 2, length.out=50)
y <- piecewise(x)
x <- seq(-2, 2, length.out=50)
y <- piecewise(x)
library(tidyverse)
piecewise <- function(x) {
case_when(
between(x, -2, -1) ~ 5,
between(x, -1, 0) ~ 2,
between(x, 0, 0.5) ~ 16,
between(x,0.5, 1) ~ 4,
between(x, 1, 2) ~ 3
)
}
x <- seq(-2, 2, length.out=50)
y <- piecewise(x)
plot(x,y)
lines(x,y)
library(tidyverse)
piecewise <- function(x) {
case_when(
between(x, -2, -1) ~ 5,
between(x, -1, 0) ~ 2,
between(x, 0, 0.5) ~ -1,
between(x,0.5, 1) ~ 4,
between(x,1, 1.5) ~ 8,
between(x, 1.5, 2) ~ 3
)
}
library(tidyverse)
piecewise <- function(x) {
case_when(
between(x, -2, -1) ~ 5,
between(x, -1, 0) ~ 2,
between(x, 0, 0.5) ~ -1,
between(x,0.5, 1) ~ 4,
between(x,1, 1.5) ~ 8,
between(x, 1.5, 2) ~ 3
)
}
x <- seq(-2, 2, length.out=50)
y <- piecewise(x)
plot(x,y)
lines(x,y)
library(tidyverse)
piecewise <- function(x) {
case_when(
between(x, -2, -1) ~ 5,
between(x, -1, 0) ~ 2,
between(x, 0, 0.5) ~ -1,
between(x,0.5, 1) ~ 4,
between(x,1, 1.5) ~ 8,
between(x, 1.5, 2) ~ 3
)
}
x <- seq(-2, 2, length.out=100)
y <- piecewise(x)
plot(x,y)
lines(x,y)
library(tidyverse)
piecewise <- function(x) {
case_when(
between(x, -2, -1) ~ 5,
between(x, -1, 0) ~ 2,
between(x, 0, 0.5) ~ -1,
between(x,0.5, 1) ~ 4,
between(x,1, 1.5) ~ 8,
between(x, 1.5, 2) ~ 3
)
}
x <- seq(-2, 2, length.out=100)
y <- piecewise(x)
plot(x,y)
lines(x,y)
optimize(f = piecewise,
lower=-2,
upper=2)
library(tidyverse)
piecewise <- function(x) {
case_when(
between(x, -2, -1) ~ 5,
between(x, -1, 0) ~ 2,
between(x, 0, 0.5) ~ -1,
between(x,0.5, 1) ~ 4,
between(x,1, 1.5) ~ 8,
between(x, 1.5, 2) ~ 3
)
}
x <- seq(-2, 2, length.out=100)
y <- piecewise(x)
plot(x,y)
lines(x,y)
op <- optimize(f = piecewise, lower=-2, upper=2)
min <- op$minimum
points(x=op$minimum, y=op$objective)
points(x=op$minimum, y=op$objective, color="red", size=4)
plot
?plot
points(x=op$minimum, y=op$objective, color="red", cex=4)
points(x=op$minimum, y=op$objective, col="red", cex=4)
points(x=op$minimum, y=op$objective, col="red", cex=2)
library(tidyverse)
piecewise <- function(x) {
case_when(
between(x, -2, -1) ~ 5,
between(x, -1, 0) ~ 2,
between(x, 0, 0.5) ~ -1,
between(x,0.5, 1) ~ 4,
between(x,1, 1.5) ~ 8,
between(x, 1.5, 2) ~ 3
)
}
x <- seq(-2, 2, length.out=100)
y <- piecewise(x)
plot(x,y)
lines(x,y)
op <- optimize(f = piecewise, lower=-2, upper=2)
min <- op$minimum
points(x=op$minimum, y=op$objective, col="red", cex=2)
library(tidyverse)
piecewise <- function(x) {
case_when(
between(x, -2, -1) ~ 5,
between(x, -1, 0) ~ 2,
between(x, 0, 0.5) ~ -1,
between(x,0.5, 1) ~ 4,
between(x,1, 1.5) ~ 8,
between(x, 1.5, 2) ~ 3
)
}
x <- seq(-2, 2, length.out=100)
y <- piecewise(x)
plot(x,y)
lines(x,y)
op <- optimize(f = piecewise, lower=-2, upper=2)
min <- op$minimum
points(x=op$minimum, y=op$objective, col="red", cex=2)
library(tidyverse)
piecewise <- function(x) {
case_when(
between(x, -2, -1) ~ 5,
between(x, -1, 0) ~ 2,
between(x, 0, 0.5) ~ -1,
between(x,0.5, 1) ~ 4,
between(x,1, 1.5) ~ 8,
between(x, 1.5, 2) ~ 3
)
}
x <- seq(-2, 2, length.out=100)
y <- piecewise(x)
plot(x,y)
lines(x,y)
op <- optimize(f = piecewise, lower=-2, upper=2)
min <- op$minimum
points(x=op$minimum, y=op$objective, col="red", cex=2)
?optim
?optimize
library(reticulate)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
py_install("scipy")
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# create a new environment
conda_create("r-reticulate")
# install SciPy
conda_install("r-reticulate", "scipy")
# import SciPy (it will be automatically discovered in "r-reticulate")
scipy <- import("scipy")
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# import SciPy (it will be automatically discovered in "r-reticulate")
scipy <- import("scipy")
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# import SciPy (it will be automatically discovered in "r-reticulate")
scipy <- import("scipy")
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
use_python("/usr/local/bin/python")
# import SciPy (it will be automatically discovered in "r-reticulate")
scipy <- import("scipy")
py_install("scipy")
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
use_python("/usr/local/bin/python")
reticulate::repl_python()
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
use_python("/usr/local/bin/python")
reticulate::repl_python()
quit
library(reticulate)
# create a new environment
conda_create("r-reticulate")
# install SciPy
conda_install("r-reticulate", "scipy")
# import SciPy (it will be automatically discovered in "r-reticulate")
scipy <- import("scipy")
library(reticulate)
# create a new environment
conda_create("r-reticulate")
# install SciPy
conda_install("r-reticulate", "scipy")
# import SciPy (it will be automatically discovered in "r-reticulate")
scipy <- import("scipy")
library(reticulate)
library(reticulate)
scipy <- import("scipy")
library(reticulate)
reticulate::repl_python()
import scipy
reticulate::repl_python()
reticulate::repl_python()
library(tidyverse)
library(reticulate)
plot(x,y)
# Create piecewise test function
piecewise <- function(x) {
case_when(
between(x, -2, -1) ~ 5,
between(x, -1, 0) ~ 2,
between(x, 0, 0.5) ~ -1,
between(x,0.5, 1) ~ 4,
between(x,1, 1.5) ~ 8,
between(x, 1.5, 2) ~ 3
)
}
# Evaluate the function on a grid of points and plot the results
x <- seq(-2, 2, length.out=100)
y <- piecewise(x)
plot(x,y)
lines(x,y)
# Find the minimum using the `optimize()` function
op <- optimize(f = piecewise, lower=-2, upper=2)
print(op)
# Show the minimum on the plot
points(x=op$minimum, y=op$objective, col="red", cex=2)
# Show the minimum on the plot
plot(x,y)
lines(x,y)
points(x=op$minimum, y=op$objective, col="red", cex=2)
# Show the minimum on the plot
plot(x,y)
lines(x,y)
points(x=op$minimum, y=op$objective, col="red", cex=2)
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
minimize_scalar(fun=f, method="golden")
reticulate::repl_python()
reticulate::repl_python()
1+1
1+1
1+1
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
setwd("~/data-science-essentials-5")
reticulate::repl_python()
